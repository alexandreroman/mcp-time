name: Build and deploy

on:
  push:
    branches:
    - main
    tags:
    - "v*"
  pull_request:
    branches:
    - main

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

env:
  JAVA_VERSION: 21

jobs:
  init:
    name: Initializing
    runs-on: ubuntu-latest
    outputs:
      artifact-id: ${{ steps.artifact-id.outputs.artifact-id }}
    steps:
    - uses: actions/checkout@v4
    - name: Get artifact id
      id: artifact-id
      run: |
        ARTIFACT_ID=$(./mvnw -B org.apache.maven.plugins:maven-help-plugin:evaluate -Dexpression=project.artifactId -q -DforceStdout)
        echo artifact-id=$ARTIFACT_ID >> $GITHUB_OUTPUT

  build:
    name: Building on ${{ matrix.os }}
    needs: init
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-latest ]
    steps:
    - uses: actions/checkout@v4
    - uses: graalvm/setup-graalvm@v1
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: graalvm
        cache: maven
        github-token: ${{ secrets.GITHUB_TOKEN }}
        native-image-job-reports: 'true'
    - name: Build and test on Windows
      if: runner.os == 'Windows'
      run: |
        .\mvnw -B -Pnative native:compile
    - name: Build and test
      if: runner.os != 'Windows'
      run: |
        ./mvnw -B -Pnative native:compile
    - uses: actions/upload-artifact@v4
      if: startsWith(github.ref, 'refs/tags/v') && runner.os == 'Windows'
      with:
        name: artifact-windows
        path: "target/${{ needs.init.outputs.artifact-id }}.exe"
        if-no-files-found: error
        compression-level: 0
    - uses: actions/upload-artifact@v4
      if: startsWith(github.ref, 'refs/tags/v') && runner.os == 'macOS'
      with:
        name: artifact-darwin
        path: "target/${{ needs.init.outputs.artifact-id }}"
        if-no-files-found: error
        compression-level: 0
    - uses: actions/upload-artifact@v4
      if: startsWith(github.ref, 'refs/tags/v') && runner.os == 'Linux'
      with:
        name: artifact-linux
        path: "target/${{ needs.init.outputs.artifact-id }}"
        if-no-files-found: error
        compression-level: 0

  release:
    name: Creating release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: [ init, build ]
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    - uses: actions/create-release@v1
      id: create-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_name: ${{ needs.init.outputs.artifact-id }}-${{ github.ref_name }}
        tag_name: ${{ github.ref_name }}
        draft: 'true'
    - uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/artifact-windows/${{ needs.init.outputs.artifact-id }}.exe
        asset_name: ${{ needs.init.outputs.artifact-id }}-windows.exe
        asset_content_type: application/x-msdownload
    - uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/artifact-darwin/${{ needs.init.outputs.artifact-id }}
        asset_name: ${{ needs.init.outputs.artifact-id }}-darwin
        asset_content_type: application/x-mach-binary
    - uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/artifact-linux/${{ needs.init.outputs.artifact-id }}
        asset_name: ${{ needs.init.outputs.artifact-id }}-linux
        asset_content_type: application/x-executable
